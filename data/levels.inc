/*
 *  WÃ¼rgertime - An Hommage to Burger Time
 *
 *  Copyright (C) 2012 by Jan Kandziora <jjj@gmx.de>
 *  licensed under the GNU GPL v3 or later
 *
 *  see https://github.com/ianka/wuergertime
 *
 * ---------------------------------------------------
 *
 *  data/levels.inc - level descriptions
 */


#ifndef LEVELS_INC
#define LEVELS_INC


#include <avr/io.h> /* for uint8_t */
#include <avr/pgmspace.h> /* for PROGMEM */


/* Local includes */
#include "../screens.h" /* for level_item_t */


/* Level descriptions. */
const uint8_t LevelDrawings[] PROGMEM={
	/* Level 0 */
	1, 2, 3, 0,

	/* End of level drawings */
	0
};

const level_item_t LevelComponents[] PROGMEM={
	/* Component block 1 */
	LEVEL_COMPONENT_PLAYER_START(15,8),
	LEVEL_COMPONENT_OPPONENT_START(11,5),
	LEVEL_COMPONENT_OPPONENT_START(20,5),
	LEVEL_COMPONENT_OPPONENT_START(8,12),
	LEVEL_COMPONENT_OPPONENT_START(11,20),
	LEVEL_COMPONENT_OPPONENT_START(15,20),
	LEVEL_COMPONENT_OPPONENT_START(12,20),
	LEVEL_COMPONENT_ATTACK_WAVE(
		LEVEL_ITEM_ATTACK_WAVE_EGGHEAD,
		LEVEL_ITEM_ATTACK_WAVE_SAUSAGEMAN,
		LEVEL_ITEM_ATTACK_WAVE_EGGHEAD,
		LEVEL_ITEM_ATTACK_WAVE_MRMUSTARD,
		LEVEL_ITEM_ATTACK_WAVE_EGGHEAD,
		LEVEL_ITEM_ATTACK_WAVE_SAUSAGEMAN,
		LEVEL_ITEM_ATTACK_WAVE_SAUSAGEMAN,
		LEVEL_ITEM_ATTACK_WAVE_MRMUSTARD
	),


	LEVEL_COMPONENT_OPTIONS(
		LEVEL_ITEM_OPTION_STOMP_ONCE|
		LEVEL_ITEM_OPTION_OPPONENT_TRIO|
		LEVEL_ITEM_OPTION_ATTACK_WAVE_MEDIUM|
		LEVEL_ITEM_OPTION_BONUS_SLOW
	),

	LEVEL_COMPONENT_FLOOR(CAP_LEFT,0,20,30),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,0,16,30),
	LEVEL_COMPONENT_FLOOR(CAP_RIGHT,0,12,30),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,0,7,9),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,7,8,23),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,0,3,9),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,21,4,9),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,7,5,12),
	LEVEL_COMPONENT_FLOOR(CAP_BOTH,19,5,4),

	LEVEL_COMPONENT_END,

	/* Component block 2 */
	LEVEL_COMPONENT_LADDER(CONTINUED,0,3,4),
	LEVEL_COMPONENT_LADDER(CONTINUED,0,7,5),
	LEVEL_COMPONENT_LADDER(CONTINUED,0,12,4),
	LEVEL_COMPONENT_LADDER(SIMPLE,0,16,4),
	LEVEL_COMPONENT_LADDER(CONTINUED,4,16,4),

	LEVEL_COMPONENT_LADDER(CONTINUED,7,3,2),
	LEVEL_COMPONENT_LADDER(CONTINUED,7,5,2),
	LEVEL_COMPONENT_LADDER(CONTINUED,7,7,1),
	LEVEL_COMPONENT_LADDER(CONTINUED,7,8,4),
	LEVEL_COMPONENT_LADDER(SIMPLE,7,12,4),
	LEVEL_COMPONENT_LADDER(CONTUPONLY,7,20,8),

	LEVEL_COMPONENT_LADDER(CONTINUED,14,8,4),
	LEVEL_COMPONENT_LADDER(CONTINUED,14,12,4),
	LEVEL_COMPONENT_LADDER(SIMPLE,14,16,4),

	LEVEL_COMPONENT_LADDER(CONTINUED,21,5,3),
	LEVEL_COMPONENT_LADDER(CONTINUED,21,8,4),
	LEVEL_COMPONENT_LADDER(SIMPLE,21,12,4),
	LEVEL_COMPONENT_LADDER(CONTUPONLY,21,20,8),

	LEVEL_COMPONENT_LADDER(SIMPLE,28,4,4),
	LEVEL_COMPONENT_LADDER(CONTINUED,28,12,4),
	LEVEL_COMPONENT_LADDER(SIMPLE,28,16,4),

	LEVEL_COMPONENT_END,

	/* Component block 3 */
	LEVEL_COMPONENT_SIGN(9,0),

	LEVEL_COMPONENT_PLATE(2,27),
	LEVEL_COMPONENT_BURGER(BUNBOTTOM,2,19),
	LEVEL_COMPONENT_BURGER(CHEESESALAD,2,15),
	LEVEL_COMPONENT_BURGER(PATTY,2,11),
	LEVEL_COMPONENT_BURGER(TOMATO,2,6),
	LEVEL_COMPONENT_BURGER(BUNTOP,2,2),

	LEVEL_COMPONENT_PLATE(9,27),
	LEVEL_COMPONENT_BURGER(BUNBOTTOM,9,19),
	LEVEL_COMPONENT_BURGER(CHEESESALAD,9,15),
	LEVEL_COMPONENT_BURGER(PATTY,9,11),
	LEVEL_COMPONENT_BURGER(BUNTOP,9,7),

	LEVEL_COMPONENT_PLATE(16,27),
	LEVEL_COMPONENT_BURGER(BUNBOTTOM,16,19),
	LEVEL_COMPONENT_BURGER(PATTY,16,15),
	LEVEL_COMPONENT_BURGER(TOMATO,16,11),
	LEVEL_COMPONENT_BURGER(BUNTOP,16,7),

	LEVEL_COMPONENT_PLATE(23,27),
	LEVEL_COMPONENT_BURGER(BUNBOTTOM,23,19),
	LEVEL_COMPONENT_BURGER(PLACEHOLDER,23,15),
	LEVEL_COMPONENT_BURGER(PATTY,23,11),
	LEVEL_COMPONENT_BURGER(PLACEHOLDER,23,7),
	LEVEL_COMPONENT_BURGER(BUNTOP,23,3),

	LEVEL_COMPONENT_SCORE(0,0),
	LEVEL_COMPONENT_BONUS(23,0),
	LEVEL_COMPONENT_LIVES(0,27),

	LEVEL_COMPONENT_END,
};


#endif /* SCREENLISTS_INC */
